 泛型是JDK1.5的新特性
 	泛型的好处：
 		1.将运行时的异常提前至了编译时。
 		2.避免了无谓的强制类型转换
 	泛型的格式：
 		ArrayList<String> list = new ArrayList<String>();    	true
 		ArrayList<Object> list = new ArrayList<String>();		false	
 		ArrayList<String> list = new ArrayList<Object>();		false
 		ArrayList<String> list = new ArrayList();				true
 		ArrayList         list = new ArrayList<String>();		true
 	注意： 反省没有多态的概念，左右两边的类型必须要保持一致，或者是只写一边的泛型。
 	推荐使用：两边都写泛型。
 	
 	自定义泛型： 自定义泛型是指一个数据类型的占位符或者一个数据类型的变量。
 	方法上自定义泛型：
 		修饰符  <声明自定义的泛型>返回值类型  函数名(使用自定义泛型...){
 		
 		}
 		
 	在泛型中不能使用基本数据类型，如果需要使用基本数据类型，那么使用基本数据类型对应的包装类。
 	方法泛型注意事项：
 		1.在方法上自定义泛型，这个自定义泛型的具体数据类型实在调用该方法的时候传入实参时确定具体的数据类型的。
 		2.自定义泛型只要符合标识符的命名规则即可,但是自定义泛型使用  一般我们都习惯使用一个大写字母表示。 T Type   E  Element
 		
 	泛型类：
 	在类上自定义泛型：
 		class 类名<声明的自定义泛型>{
 		
 		}
 	在类上自定义泛型注意事项：
 		1.在类上自定义泛型的具体数据类型是在使用该类创建对象的时候确定的；
 		2.如果一个类在类上已经声明了自定义泛型，使用该类创建对象时没有指定具体的数据类型，会默认使用Object类型；
 		3.在类上自定义泛型不能作用于静态的方法，如果静态的方法需要使用自定义泛型，那么需要在方法上自己声名使用。